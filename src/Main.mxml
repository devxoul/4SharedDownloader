<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="components.*"
					   title="4Shared Downloader v1.0.1" fontFamily="Malgun Gothic" showStatusBar="false"
					   addedToStage="init()">
		
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "components.*";
		
		mx|Alert {
			cornerRadius: 4px;
			headerHeight: 25px;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.DownloadErrorEvent;
			import air.update.events.StatusUpdateErrorEvent;
			import air.update.events.UpdateEvent;
			
			import bindings.Downloading;
			import bindings.Song;
			
			import events.DownloadEvent;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			private static const SEARCH_BASE_URL : String = "http://search.4shared.com/q/SEARCH_OPTION/PAGE/music/";
			private static const NEW_LINE_PATTERN : String = "(\r|\n)";
			
			private static const XOUL_KR_REQ : URLRequest = new URLRequest( "http://xoul.kr" );
			
			/**
			 * 검색어 입력할 때 추가하고 제거할 아스키코드.
			 */
			private static const SEPERATOR : String = String.fromCharCode( 16 );
			
			private var _searchLoader : URLLoader;
			private var _linkLoader : URLLoader;
			
			/**
			 * 현재 검색어
			 */
			private var _searchWord : String;
			
			private var _numResults : int;
			
			[Bindable]
			private var currentPage : int = 1;
			
			[Bindable]
			private var numPages : int;
			
			[Bindable]
			private var searchResults : ArrayList;
			
			[Binable]
			private var pages : ArrayList;
			
			[Bindable]
			private var downloadings : ArrayList;
			
			[Bindable]
			private var searchContainerWidth : Number = 270;
			
			private var _appUpdater : ApplicationUpdaterUI;
			
			private function init() : void
			{
				initAppUpdater();
				
				_searchLoader = new URLLoader;
				_searchLoader.addEventListener( Event.COMPLETE, onSearchLoadComplete );
				
				_linkLoader = new URLLoader;
				_linkLoader.addEventListener( Event.COMPLETE, onLinkLoadComplete );
				
				searchResults = new ArrayList;
				pages = new ArrayList;
				downloadings = new ArrayList;
				
				updateDownloadPathInput();
				
				stage.addEventListener( MouseEvent.MOUSE_UP, onMouseUp );
			}
			
			private function initAppUpdater() : void
			{
				_appUpdater = new ApplicationUpdaterUI;
				_appUpdater.updateURL = "http://joyfl.kr/xoul/4SharedDownloader/update.xml";
				_appUpdater.delay = 1;
				_appUpdater.isCheckForUpdateVisible = false;
				_appUpdater.addEventListener( UpdateEvent.INITIALIZED, onAppUpdaterInit );
				_appUpdater.addEventListener( ErrorEvent.ERROR, onAppUpdaterError );
				_appUpdater.addEventListener( StatusUpdateErrorEvent.UPDATE_ERROR, onAppUpdaterError );
				_appUpdater.addEventListener( DownloadErrorEvent.DOWNLOAD_ERROR, onAppUpdaterError );
				_appUpdater.initialize();
			}
			
			private function onAppUpdaterInit( e : UpdateEvent ) : void
			{
				trace( "appUpdater init" );
				_appUpdater.checkNow();
			}
			
			private function onAppUpdaterError( e : ErrorEvent ) : void
			{
				trace( "ApplicationUpdaterUI 에러랑께!!", e.toString() );
			}
			
			/**
			 * 검색창에서 엔터키를 입력할 때 실행되는 메서드.
			 */
			private function onSearchWordInputEnter( e : FlexEvent ) : void
			{
				setSearchWord();
				search( _searchWord, 1 );				
			}
			
			/**
			 * 검색 버튼을 클릭할 때 실행되는 메서드.
			 */
			private function onSearchButtonClick( e : MouseEvent ) : void
			{
				setSearchWord();
				search( _searchWord, 1 );
			}
			
			/**
			 * _searchWord를 searchWordInput.text에서 한글 잘림 방지를 한 문자열로 설정한다.
			 */
			private function setSearchWord() : void
			{
				if( searchWordInput.text == "" )
				{
					Alert.show( "검색어를 입력해주세요." );
					return;
				}
				
				searchWordInput.appendText( SEPERATOR );
				searchWordInput.text = searchWordInput.text.split( SEPERATOR ).join( "" );
				searchWordInput.selectRange( searchWordInput.text.length, searchWordInput.text.length );
				_searchWord = searchWordInput.text;
			}
			
			/**
			 * 검색어로 검색한다.
			 * @param page 검색할 페이지.
			 */
			private function search( searchWord : String = null, page : int = 1 ) : void
			{
				if( !searchWord ) searchWord = _searchWord;
				else _searchWord = searchWord;
				
				startBusy();
				
				var url : String = SEARCH_BASE_URL.split( "SEARCH_OPTION" ).join( searchOptionList.selectedItem.value ).split( "PAGE" ).join( ( page - 1 ) * 10 ) + encodeURI( _searchWord );
				trace( "검색 url은???", url );
				_searchLoader.load( new URLRequest( url ) );
				
				currentPage = page;
			}
			
			/**
			 * 검색 결과 로드 명령이 완료되었을 때 실행되는 메서드.
			 */
			private function onSearchLoadComplete( e : Event ) : void
			{
				searchResults.removeAll();
				parseSearchResult( _searchLoader.data );
				
				stopBusy();
				
				trace( "searchResultList에 자식이 몇개??", searchResultList.numChildren );
			}
			
			/**
			 * 검색된 결과를 파싱해서 리스트에 뿌려준다.
			 * @param html 검색된 결과 html
			 */
			private function parseSearchResult( html : String ) : void
			{
				var data : Array = html.split( '<td width="102" class="simpleThumb">' );
				var len : int = data.length;
				
				// 검색결과 없음
				if( len <= 1 )
				{
					_numResults = 0;
					numPages = 0;
					return;
				}
				
				_numResults = int( data[len - 1].split( '<td class="pager">&nbsp;(총' )[1].split( ')' )[0] );
				numPages = Math.ceil( _numResults / 10 );
				
				for( var i : int = 1; i < len; i++ )
				{
					var song : Song = new Song;
					song.title = data[i].split( 'width="32" height="32" vspace="27" class="absmid" alt="' )[1].split( '" title="' )[0];
					song.size = data[i].split( '<div class="fsize">' )[1].split( '</div>' )[0];
					song.link = data[i].split( '<h1><a href="' )[1].split( '" target="_blank">' )[0];
					searchResults.addItem( song );
//					trace( "제목 :", song.title );
//					trace( "크기 :", song.size );
//					trace( "링크 :", song.link );
//					trace( "" );
				}
				
				len = _numResults / 10;
				for( i = 0; i < len; i++ )
				{
					pages.addItem( i + 1 );
				}
			}
			
			/**
			 * 다운로드 버튼을 클릭할 때 실행되는 메서드.
			 */
			private function onDownloadButtonClick( e : MouseEvent ) : void
			{
				loadLink();
			}
			
			/**
			 * 검색결과 리스트에 있는 아이템을 더블클릭할 때 실행되는 메서드.
			 */
			private function onSearchResultItemListDoubleClick( e : DownloadEvent ) : void
			{
				loadLink();
			}
			
			/**
			 * 파일 다운로드 링크를 로드하는 메서드.
			 */
			private function loadLink() : void
			{
				if( searchResultList.selectedIndex == -1 )
				{
					Alert.show( "다운로드할 곡을 선택해주세요." );
					return;
				}
				
				if( downloadPathInput.text == "" )
				{
					Alert.show( "다운로드 위치가 올바르지 않습니다." );
					return;
				}
				
				var len : int = downloadings.length;
				var selectedTitle : String = searchResultList.selectedItem.title;
				for( var i : int = 0; i < len; i++ )
				{
					if( downloadings.source[i].title == selectedTitle )
					{
						Alert.show( "다운로드 목록에 같은 이름의 파일이 존재합니다." );
						return;
					}
				}
				
				startBusy();
				
				var url : String = searchResultList.selectedItem.link;
				_linkLoader.load( new URLRequest( url ) );
			}
			
			/**
			 * 파일 다운로드 링크를 로드했을 때 실행되는 메서드.
			 */
			private function onLinkLoadComplete( e : Event ) : void
			{
				var isAvailable : int = _linkLoader.data.search( 'is unavailable' );
				if( isAvailable != -1 )
				{
					Alert.show( "파일이 삭제되었습니다." );
					stopBusy();
					return;
				}
//				var downloadURL : String = _linkLoader.data.split( 'function startDownload(){' )[1].split( 'window.location = "' )[1].split( '";' )[0];
				var downloadURL : String = _linkLoader.data.split( '<meta property="og:audio" content="' )[1].split( '" />' )[0];
				
				download( downloadURL );
				
				stopBusy();
			}
			
			/**
			 * 다운로드를 시작할 때 사용되는 메서드.
			 * @param url 파일 다운로드 경로.
			 */
			private function download( url : String ) : void
			{
				var downloading : Downloading = new Downloading;
				downloading.title = searchResultList.selectedItem.title;
				downloading.index = downloadings.length;
				downloading.startDownload( url, downloadPathInput.text, downloading.title + ".mp3" );
				downloadings.addItem( downloading );
			}
			
			/**
			 * 파일 다운로드 위치 라벨 클릭할 때 실행되는 메서드.
			 */
			private function onDownloadPathLabelClick( e : MouseEvent ) : void
			{
				if( downloadPathInput.text == "" )
				{
					Alert.show( "다운로드 위치가 올바르지 않습니다." );
					return;
				}
				var file : File = new File( downloadPathInput.text );
				file.openWithDefaultApplication();
				file = null;
			}
			
			/**
			 * 파일 다운로드 위치에서 [...] 버튼 클릭할 때 실행되는 메서드.
			 */
			private function onBrowseButtonClick( e : MouseEvent ) : void
			{
				browseForDownloadDirectory();
			}
			
			/**
			 * 다운로드 위치를 선택하는 다이얼로그를 띄운다.
			 */
			private function browseForDownloadDirectory() : void
			{
				var file : File = new File;
				file.browseForDirectory( "다운로드 위치 선택" );
				file.addEventListener( Event.SELECT, onDownloadDirectorySelect );
			}
			
			/**
			 * 다운로드 디렉토리 선택시 실행되는 메서드.
			 */
			private function onDownloadDirectorySelect( e : Event ) : void
			{
				var file : File = e.target as File;
				file.removeEventListener( Event.SELECT, onDownloadDirectorySelect );
				var path : String = file.nativePath;
				Setting.setSetting( SettingKeys.DOWNLOAD_PATH, path );
				file = null;
				updateDownloadPathInput();
			}
			
			/**
			 * 다운로드 경로를 업데이트한다.
			 */
			private function updateDownloadPathInput() : void
			{
				var path : String = Setting.getSetting( SettingKeys.DOWNLOAD_PATH ) as String;
				if( path ) downloadPathInput.text = path;
				else Alert.show( "다운로드 위치를 지정하세요.", "", 4, null, onDownloadPathAlertClose );
			}
			
			/**
			 * "다운로드 위치를 지정하세요." 알림창이 닫힐 때 실행되는 메서드.
			 */
			private function onDownloadPathAlertClose( e : CloseEvent ) : void
			{
				browseForDownloadDirectory();
			}
			
			/**
			 * 이전 페이지 버튼을 클릭할 때 실행되는 메서드.
			 */
			private function onPrevPageButtonClick( e : MouseEvent ) : void
			{
				if( !searchResults.length ) return;
				if( currentPage == 1 ) return;
				search( null, --currentPage );
			}
			
			/**
			 * 페이지 인풋이 바뀔 때 실행되는 메서드.
			 */
			private function onPageInputEnter( e : FlexEvent ) : void
			{
				if( !searchResults.length ) return;
				
				var inputPage : int = int( pageInput.text );
				if( 1 <= inputPage && inputPage <= numPages )
				{
					search( null, currentPage = inputPage );
				}
				else
				{
					pageInput.text = String( currentPage );
					pageInput.selectAll();
				}
			}
			
			/**
			 * 다음 페이지 버튼을 클릭할 때 실행되는 메서드.
			 */
			private function onNextPageButtonClick( e : MouseEvent ) : void
			{
				if( !searchResults.length ) return;
				if( currentPage == numPages ) return;
				search( null, ++currentPage );
			}
			
			private function startBusy() : void
			{
				this.enabled = false;
				cursorManager.setBusyCursor();
			}
			
			private function stopBusy() : void
			{
				this.enabled = true;
				cursorManager.removeBusyCursor();
			}
			
			/**
			 * 구분선에서 마우스가 다운될 때에만 이벤트 리스너가 추가됨.
			 */
			private function onMouseMove( e : MouseEvent ) : void
			{
				searchContainerWidth = mouseX - 18;
				
				if( searchContainerWidth < 100 ) searchContainerWidth = 100;
				else if( searchContainerWidth > stage.stageWidth - 100 ) searchContainerWidth = stage.stageWidth - 100;
			}
			
			/**
			 * 구분선에 마우스를 다운했을 때 마우스 무브 리스너를 추가한다.
			 */
			private function onSeperatorMouseDown( e : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_MOVE, onMouseMove );
			}
			
			/**
			 * 마우스를 업했을 때 마우스 무브 리스너를 제거한다.
			 */
			private function onMouseUp( e : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, onMouseMove );	
			}
			
			/**
			 * 다운로드를 취소했을 때 실행되는 메서드.
			 */
			private function onDownloadingCancel( e : DownloadEvent ) : void
			{
				var index : int = e.index;
				Downloading( downloadings.source[index] ).cancelDownload();
			}
			
			/**
			 * 다운로드를 재시작했을 때 실행되는 메서드.
			 */
			private function onDownloadingRestart( e : DownloadEvent ) : void
			{
				var index : int = e.index;
				var downloading : Downloading = downloadings.source[index] as Downloading;
				downloading.restartDownload();
			}
			
			/**
			 * 목록에서 제거 버튼을 클릭했을 때 실행되는 메서드.
			 */
			private function onDownloadingRemoveFromList( e : DownloadEvent ) : void
			{
				var index : int = e.index;
				downloadings.removeItemAt( index );
			}
			
			/**
			 * 디스크에서 제거 버튼을 클릭했을 때 실행되는 메서드.
			 */
			private function onDownloadingRemoveFromDisk( e : DownloadEvent ) : void
			{
				var index : int = e.index;
				var downloading : Downloading = downloadings.source[index] as Downloading;
				if( !downloading ) return;
				downloading.cancelDownload();
				downloading.removeFromDisk();
				downloadings.removeItemAt( index );
			}
			
			private function onXoulLabelButtonClick( e : MouseEvent ) : void
			{
				navigateToURL( XOUL_KR_REQ );
			}
		]]>
	</fx:Script>
	
	<s:Panel width="100%" height="100%" title="{this.title}">
		<s:layout>
			<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
		</s:layout>
		
		<s:HGroup width="100%" height="100%">
			<!-- 왼쪽 -->
			<s:VGroup width="{searchContainerWidth}" height="100%">
				<!-- 검색 -->
				<s:HGroup width="100%">
					<s:TextInput id="searchWordInput" width="100%" enter="onSearchWordInputEnter( event )" />
					<s:Button label="검색" width="50" click="onSearchButtonClick( event )" />
				</s:HGroup>
				
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="검색옵션 :" />
					<s:DropDownList id="searchOptionList" width="100%" itemRenderer="renderers.SearchOptionRenderer" selectedIndex="2">
						<s:dataProvider>
							<s:ArrayList>
								<fx:Object label="전체" value="{SearchOption.ALL_TIME}" />
								<fx:Object label="지난달" value="{SearchOption.LAST_MONTH}" />
								<fx:Object label="크기 (큰 → 작은)" value="{SearchOption.LARGE}" />
								<fx:Object label="크기 (작은 → 큰)" value="{SearchOption.SMALL}" />
								<fx:Object label="이름 (A → Z)" value="{SearchOption.A_Z}" />
								<fx:Object label="이름 (Z → A)" value="{SearchOption.Z_A}" />
								<fx:Object label="최근" value="{SearchOption.RECENT}" />
							</s:ArrayList>
						</s:dataProvider>
					</s:DropDownList>
				</s:HGroup>
				
				<!-- 검색결과 리스트 -->
				<components:SearchResultList id="searchResultList" width="100%" height="100%"
											 itemRenderer="renderers.SearchResultRenderer" dataProvider="{searchResults}"
											 start="onSearchResultItemListDoubleClick( event )" />
				
				<s:HGroup width="100%" height="30" verticalAlign="middle">
					<s:Button label=">" scaleX="-1" width="30" height="30" cornerRadius="15" click="onPrevPageButtonClick( event )" />
					<s:TextInput id="pageInput" text="{currentPage}" width="28" restrict="0-9" maxChars="3" enter="onPageInputEnter( event )" />
					<s:Label text="/ {numPages}" />
					<s:Button label=">" width="30" height="30" cornerRadius="15" click="onNextPageButtonClick( event )" />
					<s:Button label="다운로드" width="100%" height="30" click="onDownloadButtonClick( event )" />
				</s:HGroup>
			</s:VGroup>
			
			<!-- 구분선 -->
			<s:HGroup height="100%" horizontalAlign="center" verticalAlign="middle" buttonMode="true"
					  paddingLeft="1" paddingRight="1" gap="2"
					  mouseDown="onSeperatorMouseDown( event )">
				<s:Line height="14">
					<s:stroke>
						<s:SolidColorStroke color="0x666666" />
					</s:stroke>
				</s:Line>
				<s:Line height="14">
					<s:stroke>
						<s:SolidColorStroke color="0x666666" />
					</s:stroke>
				</s:Line>
			</s:HGroup>
			
			<s:VGroup width="100%" height="100%">
				<!-- 다운로드 위치 -->
				<s:HGroup width="100%" verticalAlign="middle">
					<components:LabelButton text="다운로드 위치" click="onDownloadPathLabelClick( event )" />
					<s:Label text=":" />
					<s:TextInput id="downloadPathInput" width="100%" />
					<s:Button label="..." width="32" click="onBrowseButtonClick( event )" />
				</s:HGroup>
				
				<!-- 다운로드 현황 리스트 -->
				<components:DownloadList id="downloadList" width="100%" height="100%"
										 itemRenderer="renderers.DownloadingRenderer" dataProvider="{downloadings}"
										 cancel="onDownloadingCancel( event )"
										 restart="onDownloadingRestart( event )"
										 removeFromList="onDownloadingRemoveFromList( event )"
										 removeFromDisk="onDownloadingRemoveFromDisk( event )" />
			</s:VGroup>
		</s:HGroup>
		
		<s:controlBarLayout>
			<s:HorizontalLayout horizontalAlign="right" paddingTop="8" paddingRight="10" paddingBottom="5" />
		</s:controlBarLayout>
		
		<s:controlBarContent>
			<components:LabelButton text="xoul.kr" color="0" fontWeight="bold" click="onXoulLabelButtonClick( event )" />
		</s:controlBarContent>
	</s:Panel>
</s:WindowedApplication>
