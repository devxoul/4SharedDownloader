<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="components.*"
					   title="4Shared Downloader v1.0.5" fontFamily="Malgun Gothic" showStatusBar="false"
					   addedToStage="onAddedToStage()" xmlns:views="views.*">
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "components.*";
		
		mx|Alert {
			cornerRadius: 4px;
			headerHeight: 25px;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.DownloadErrorEvent;
			import air.update.events.StatusUpdateErrorEvent;
			import air.update.events.UpdateEvent;
			
			import analyzer.Analyzer;
			
			import bindings.Downloading;
			import bindings.Song;
			
			import events.DownloadEvent;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexSprite;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.core.SpriteVisualElement;
			
			import views.PrivacyPopup;
			
			
			private static const XOUL_KR_REQ : URLRequest = new URLRequest( "http://xoul.kr" );
			
			[Bindable]
			private var searchContainerWidth : Number = 290;
			
			private var _appUpdater : ApplicationUpdaterUI;
			private var _htmlLoader : HTMLLoader = new HTMLLoader();
			
			private function onAddedToStage() : void
			{
				if( Setting.getSetting( SettingKeys.PRIVACY_AGREEMENT ) )
				{
					init();
				}
				else
				{
					var privacyPopup : PrivacyPopup = PopUpManager.createPopUp( this, PrivacyPopup, true ) as PrivacyPopup;
					privacyPopup.x = ( this.width - privacyPopup.width ) * .5;
					privacyPopup.y = ( this.height - privacyPopup.height ) * .5;
				}
			}
			
			private function init() : void
			{
				startBusy();
				_htmlLoader.userAgent = "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5";
				_htmlLoader.addEventListener( Event.COMPLETE, onHTMLLoaderLoadComplete );
				_htmlLoader.load( new URLRequest( "http://m.4shared.com/login.jsp" ) );
				
				initAppUpdater();
				
				stage.addEventListener( MouseEvent.MOUSE_UP, onMouseUp );
								
				if( !Setting.getSetting( SettingKeys.ANALYZER_ID ) )
				{
					trace( "request id" );
					Analyzer.request( Const.REQUEST_ID, null, onRequestIdComplete );
				}
				else
				{
					Analyzer.request( Const.REQUEST_CONNECT, { id: Setting.getSetting( SettingKeys.ANALYZER_ID ) }, onRequestConnectComplete );
					Analyzer.request( Const.REQUEST_UPDATES, { id: Setting.getSetting( SettingKeys.ANALYZER_ID ),
															   version: "1.0.5" }, onRequestVersionComplete );
				}
			}
			
			private function onHTMLLoaderLoadComplete( e : Event ) : void
			{	
				if( _htmlLoader.location.indexOf( "account" ) > -1 )
				{
					stopBusy();
					return;
				}
				
				_htmlLoader.window.document.getElementById( "remfield" ).checked = false;
				_htmlLoader.window.document.getElementById( "remfield" ).value = false;
				_htmlLoader.window.document.getElementById( "logfield" ).value = "4shared.downloader@gmail.com";
				_htmlLoader.window.document.getElementById( "passfield" ).value = "4sd";
				_htmlLoader.window.document.getElementsByTagName( "button" )[0].click();
			}
			
			private function initAppUpdater() : void
			{
				_appUpdater = new ApplicationUpdaterUI;
				_appUpdater.updateURL = "http://xoul.kr/4SharedDownloader/update.xml";
				_appUpdater.delay = 1;
				_appUpdater.isCheckForUpdateVisible = false;
				_appUpdater.addEventListener( UpdateEvent.INITIALIZED, onAppUpdaterInit );
				_appUpdater.addEventListener( ErrorEvent.ERROR, onAppUpdaterError );
				_appUpdater.addEventListener( StatusUpdateErrorEvent.UPDATE_ERROR, onAppUpdaterError );
				_appUpdater.addEventListener( DownloadErrorEvent.DOWNLOAD_ERROR, onAppUpdaterError );
				_appUpdater.initialize();
			}
			
			private function onAppUpdaterInit( e : UpdateEvent ) : void
			{
				trace( "appUpdater init" );
				_appUpdater.checkNow();
			}
			
			private function onAppUpdaterError( e : ErrorEvent ) : void
			{
				trace( "ApplicationUpdaterUI 에러랑께!!", e.toString() );
			}
			
			/**
			 * 
			 */
			private function onRequestIdComplete( data : String ) : void
			{
				trace( "ID를 받았다!!", data );
				Setting.setSetting( SettingKeys.ANALYZER_ID, data );
				
				trace( "연결!!", Setting.getSetting( SettingKeys.ANALYZER_ID ) );
				Analyzer.request( Const.REQUEST_CONNECT, { id : Setting.getSetting( SettingKeys.ANALYZER_ID ) }, onRequestConnectComplete );
			}
			
			/**
			 * 
			 */
			private function onRequestConnectComplete( data : String ) : void
			{
				
			}
			
			/**
			 * 
			 */
			private function onRequestVersionComplete( data : String ) : void
			{
				
			}
			
			
			/**
			 * 구분선에서 마우스가 다운될 때에만 이벤트 리스너가 추가됨.
			 */
			private function onMouseMove( e : MouseEvent ) : void
			{
				searchContainerWidth = mouseX - 18;
				
				if( searchContainerWidth < 100 ) searchContainerWidth = 100;
				else if( searchContainerWidth > stage.stageWidth - 100 ) searchContainerWidth = stage.stageWidth - 100;
			}
			
			/**
			 * 구분선에 마우스를 다운했을 때 마우스 무브 리스너를 추가한다.
			 */
			private function onSeperatorMouseDown( e : MouseEvent ) : void
			{
				stage.addEventListener( MouseEvent.MOUSE_MOVE, onMouseMove );
			}
			
			/**
			 * 마우스를 업했을 때 마우스 무브 리스너를 제거한다.
			 */
			private function onMouseUp( e : MouseEvent ) : void
			{
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, onMouseMove );	
			}
			
			
			private function onXoulLabelButtonClick( e : MouseEvent ) : void
			{
				navigateToURL( XOUL_KR_REQ );
			}
			
			private function startBusy() : void
			{
				this.enabled = false;
				cursorManager.setBusyCursor();
			}
			
			private function stopBusy() : void
			{
				this.enabled = true;
				cursorManager.removeBusyCursor();
			}
		]]>
	</fx:Script>
	
	<s:Panel width="100%" height="100%" title="{this.title}">
		<s:layout>
			<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" />
		</s:layout>
		
		<s:HGroup width="100%" height="100%">
			<views:SearchView id="searchView" width="{searchContainerWidth}" height="100%" main="{this}" />
			
			<!-- 구분선 -->
			<s:HGroup height="100%" horizontalAlign="center" verticalAlign="middle" buttonMode="true"
					  paddingLeft="1" paddingRight="1" gap="2"
					  mouseDown="onSeperatorMouseDown( event )">
				<s:Line height="14">
					<s:stroke>
						<s:SolidColorStroke color="0x666666" />
					</s:stroke>
				</s:Line>
				<s:Line height="14">
					<s:stroke>
						<s:SolidColorStroke color="0x666666" />
					</s:stroke>
				</s:Line>
			</s:HGroup>
			
			<views:DownloadView id="downloadView" width="100%" height="100%" main="{this}" />
		</s:HGroup>
		
		<s:controlBarLayout>
			<s:HorizontalLayout horizontalAlign="right" paddingTop="8" paddingRight="10" paddingBottom="5" />
		</s:controlBarLayout>
		
		<s:controlBarContent>
			<components:LabelButton text="xoul.kr" color="0" fontWeight="bold" click="onXoulLabelButtonClick( event )" />
		</s:controlBarContent>
	</s:Panel>
	
	<!--<mx:HTML id="_htmlLoader" width="100%" height="100%" />-->
</s:WindowedApplication>